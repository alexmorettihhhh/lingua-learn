{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../config';\nimport { getAuthHeader } from '../utils/auth';\n/**\r\n * Получает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с данными о прогрессе\r\n */\nexport const getLessonProgress = async lessonId => {\n  try {\n    const response = await axios.get(`${API_URL}/progress/lesson/${lessonId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при получении прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};\n\n/**\r\n * Обновляет прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @param data Данные о прогрессе (процент завершения)\r\n * @returns Объект с результатом операции\r\n */\nexport const updateLessonProgress = async (lessonId, data) => {\n  try {\n    const response = await axios.post(`${API_URL}/progress/update`, {\n      lessonId,\n      ...data\n    }, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при обновлении прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};\n\n/**\r\n * Получает весь прогресс пользователя\r\n * @returns Объект со всеми данными о прогрессе\r\n */\nexport const getAllProgress = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/progress`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при получении прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};\n\n/**\r\n * Обновляет прогресс для конкретного слова в уроке\r\n * @param lessonId ID урока\r\n * @param wordId ID слова\r\n * @returns Объект с результатом операции\r\n */\nexport const updateWordProgress = async (lessonId, wordId) => {\n  try {\n    const response = await axios.post(`${API_URL}/progress/update`, {\n      lessonId,\n      wordId\n    }, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при обновлении прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};\n\n/**\r\n * Получает общий прогресс пользователя\r\n * @returns Объект с общими данными о прогрессе\r\n */\nexport const getUserProgress = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/progress/user`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при получении прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};\n\n/**\r\n * Сбрасывает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с результатом операции\r\n */\nexport const resetLessonProgress = async lessonId => {\n  try {\n    const response = await axios.delete(`${API_URL}/progress/lesson/${lessonId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (axios.isAxiosError(error) && error.response) {\n      return {\n        success: false,\n        message: error.response.data.message || 'Ошибка при сбросе прогресса'\n      };\n    }\n    return {\n      success: false,\n      message: 'Не удалось сбросить прогресс. Проверьте подключение к интернету.'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","getAuthHeader","getLessonProgress","lessonId","response","get","headers","data","error","isAxiosError","success","message","updateLessonProgress","post","getAllProgress","updateWordProgress","wordId","getUserProgress","resetLessonProgress","delete"],"sources":["E:/grok/client/src/services/progress.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\nimport { getAuthHeader } from '../utils/auth';\r\nimport { ApiResponse, IProgress } from '../types';\r\n\r\nexport interface IProgressResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    lessonId: string;\r\n    userId: string;\r\n    completedWords: string[];\r\n    completionPercentage: number;\r\n    lastAccessed: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * Получает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с данными о прогрессе\r\n */\r\nexport const getLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress/lesson/${lessonId}`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Обновляет прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @param data Данные о прогрессе (процент завершения)\r\n * @returns Объект с результатом операции\r\n */\r\nexport const updateLessonProgress = async (\r\n  lessonId: string, \r\n  data: { completionPercentage: number }\r\n): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, ...data },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при обновлении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Получает весь прогресс пользователя\r\n * @returns Объект со всеми данными о прогрессе\r\n */\r\nexport const getAllProgress = async (): Promise<ApiResponse<IProgress[]>> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Обновляет прогресс для конкретного слова в уроке\r\n * @param lessonId ID урока\r\n * @param wordId ID слова\r\n * @returns Объект с результатом операции\r\n */\r\nexport const updateWordProgress = async (\r\n  lessonId: string, \r\n  wordId: string\r\n): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, wordId },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при обновлении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Получает общий прогресс пользователя\r\n * @returns Объект с общими данными о прогрессе\r\n */\r\nexport const getUserProgress = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    completedLessons: number;\r\n    totalLessons: number;\r\n    completedWords: number;\r\n    totalWords: number;\r\n    overallPercentage: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress/user`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Сбрасывает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с результатом операции\r\n */\r\nexport const resetLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.delete(\r\n      `${API_URL}/progress/lesson/${lessonId}`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при сбросе прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось сбросить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}