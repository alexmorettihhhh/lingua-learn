{"ast":null,"code":"import api from './api';\n\n// Интерфейс для ответа при аутентификации\n\n// Регистрация пользователя\nexport const register = async userData => {\n  const response = await api.post('/auth/register', userData);\n  return response.data;\n};\n\n// Вход пользователя\nexport const login = async userData => {\n  const response = await api.post('/auth/login', userData);\n  return response.data;\n};\n\n// Получение данных текущего пользователя\nexport const getCurrentUser = async () => {\n  const response = await api.get('/auth/me');\n  return response.data;\n};\n\n// Обновление пароля\nexport const updatePassword = async (currentPassword, newPassword) => {\n  const response = await api.put('/auth/updatepassword', {\n    currentPassword,\n    newPassword\n  });\n  return response.data;\n};\n\n// Выход пользователя (локальная очистка)\nexport const logout = () => {\n  localStorage.removeItem('token');\n};","map":{"version":3,"names":["api","register","userData","response","post","data","login","getCurrentUser","get","updatePassword","currentPassword","newPassword","put","logout","localStorage","removeItem"],"sources":["E:/grok/client/src/services/auth.service.ts"],"sourcesContent":["import api from './api';\r\nimport { ILoginData, IRegisterData, IUser } from '../types';\r\n\r\n// Интерфейс для ответа при аутентификации\r\ninterface AuthResponse {\r\n  success: boolean;\r\n  token: string;\r\n  user: IUser;\r\n  message?: string;\r\n}\r\n\r\n// Регистрация пользователя\r\nexport const register = async (userData: IRegisterData): Promise<AuthResponse> => {\r\n  const response = await api.post<AuthResponse>('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\n// Вход пользователя\r\nexport const login = async (userData: ILoginData): Promise<AuthResponse> => {\r\n  const response = await api.post<AuthResponse>('/auth/login', userData);\r\n  return response.data;\r\n};\r\n\r\n// Получение данных текущего пользователя\r\nexport const getCurrentUser = async (): Promise<{ success: boolean; user: IUser }> => {\r\n  const response = await api.get<{ success: boolean; user: IUser }>('/auth/me');\r\n  return response.data;\r\n};\r\n\r\n// Обновление пароля\r\nexport const updatePassword = async (\r\n  currentPassword: string,\r\n  newPassword: string\r\n): Promise<{ success: boolean; message: string }> => {\r\n  const response = await api.put<{ success: boolean; message: string }>(\r\n    '/auth/updatepassword',\r\n    { currentPassword, newPassword }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Выход пользователя (локальная очистка)\r\nexport const logout = (): void => {\r\n  localStorage.removeItem('token');\r\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;;AAGvB;;AAQA;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAuB,IAA4B;EAChF,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAe,gBAAgB,EAAEF,QAAQ,CAAC;EACzE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAOJ,QAAoB,IAA4B;EAC1E,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAe,aAAa,EAAEF,QAAQ,CAAC;EACtE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAAA,CAAA,KAAwD;EACpF,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACQ,GAAG,CAAoC,UAAU,CAAC;EAC7E,OAAOL,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAC5BC,eAAuB,EACvBC,WAAmB,KACgC;EACnD,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACY,GAAG,CAC5B,sBAAsB,EACtB;IAAEF,eAAe;IAAEC;EAAY,CACjC,CAAC;EACD,OAAOR,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMQ,MAAM,GAAGA,CAAA,KAAY;EAChCC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}