{"ast":null,"code":"import api from './api';\n// Получение всех слов с пагинацией\nexport const getWords = async (page = 1, limit = 50) => {\n  const response = await api.get(`/words?page=${page}&limit=${limit}`);\n  return response.data;\n};\n\n// Получение слова по ID\nexport const getWord = async id => {\n  const response = await api.get(`/words/${id}`);\n  return response.data;\n};\n\n// Получение слов по языку\nexport const getWordsByLanguage = async (language, page = 1, limit = 50) => {\n  const response = await api.get(`/words/language/${language}?page=${page}&limit=${limit}`);\n  return response.data;\n};\n\n// Получение слов по категории\nexport const getWordsByCategory = async (category, page = 1, limit = 50) => {\n  const response = await api.get(`/words/category/${category}?page=${page}&limit=${limit}`);\n  return response.data;\n};\n\n// Создание нового слова (только для админов)\nexport const createWord = async wordData => {\n  const response = await api.post('/words', wordData);\n  return response.data;\n};\n\n// Обновление слова (только для админов)\nexport const updateWord = async (id, wordData) => {\n  const response = await api.put(`/words/${id}`, wordData);\n  return response.data;\n};\n\n// Удаление слова (только для админов)\nexport const deleteWord = async id => {\n  const response = await api.delete(`/words/${id}`);\n  return response.data;\n};","map":{"version":3,"names":["api","getWords","page","limit","response","get","data","getWord","id","getWordsByLanguage","language","getWordsByCategory","category","createWord","wordData","post","updateWord","put","deleteWord","delete"],"sources":["E:/grok/client/src/services/word.service.ts"],"sourcesContent":["import api from './api';\r\nimport { IWord, ApiResponse } from '../types';\r\n\r\n// Получение всех слов с пагинацией\r\nexport const getWords = async (\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Получение слова по ID\r\nexport const getWord = async (id: string): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.get<ApiResponse<IWord>>(`/words/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Получение слов по языку\r\nexport const getWordsByLanguage = async (\r\n  language: string,\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words/language/${language}?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Получение слов по категории\r\nexport const getWordsByCategory = async (\r\n  category: string,\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words/category/${category}?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Создание нового слова (только для админов)\r\nexport const createWord = async (wordData: Partial<IWord>): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.post<ApiResponse<IWord>>('/words', wordData);\r\n  return response.data;\r\n};\r\n\r\n// Обновление слова (только для админов)\r\nexport const updateWord = async (\r\n  id: string,\r\n  wordData: Partial<IWord>\r\n): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.put<ApiResponse<IWord>>(`/words/${id}`, wordData);\r\n  return response.data;\r\n};\r\n\r\n// Удаление слова (только для админов)\r\nexport const deleteWord = async (id: string): Promise<ApiResponse<null>> => {\r\n  const response = await api.delete<ApiResponse<null>>(`/words/${id}`);\r\n  return response.data;\r\n}; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AAGvB;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CACtBC,IAAI,GAAG,CAAC,EACRC,KAAK,GAAG,EAAE,KACwB;EAClC,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAC5B,eAAeH,IAAI,UAAUC,KAAK,EACpC,CAAC;EACD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,OAAO,GAAG,MAAOC,EAAU,IAAkC;EACxE,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAAqB,UAAUG,EAAE,EAAE,CAAC;EAClE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBR,IAAI,GAAG,CAAC,EACRC,KAAK,GAAG,EAAE,KACwB;EAClC,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAC5B,mBAAmBK,QAAQ,SAASR,IAAI,UAAUC,KAAK,EACzD,CAAC;EACD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMK,kBAAkB,GAAG,MAAAA,CAChCC,QAAgB,EAChBV,IAAI,GAAG,CAAC,EACRC,KAAK,GAAG,EAAE,KACwB;EAClC,MAAMC,QAAQ,GAAG,MAAMJ,GAAG,CAACK,GAAG,CAC5B,mBAAmBO,QAAQ,SAASV,IAAI,UAAUC,KAAK,EACzD,CAAC;EACD,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAG,MAAOC,QAAwB,IAAkC;EACzF,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACe,IAAI,CAAqB,QAAQ,EAAED,QAAQ,CAAC;EACvE,OAAOV,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMU,UAAU,GAAG,MAAAA,CACxBR,EAAU,EACVM,QAAwB,KACQ;EAChC,MAAMV,QAAQ,GAAG,MAAMJ,GAAG,CAACiB,GAAG,CAAqB,UAAUT,EAAE,EAAE,EAAEM,QAAQ,CAAC;EAC5E,OAAOV,QAAQ,CAACE,IAAI;AACtB,CAAC;;AAED;AACA,OAAO,MAAMY,UAAU,GAAG,MAAOV,EAAU,IAAiC;EAC1E,MAAMJ,QAAQ,GAAG,MAAMJ,GAAG,CAACmB,MAAM,CAAoB,UAAUX,EAAE,EAAE,CAAC;EACpE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}