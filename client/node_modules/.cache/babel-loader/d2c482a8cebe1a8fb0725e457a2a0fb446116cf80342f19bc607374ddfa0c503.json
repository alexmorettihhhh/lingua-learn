{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';import{getAuthHeader}from'../utils/auth';/**\r\n * Получает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с данными о прогрессе\r\n */export const getLessonProgress=async lessonId=>{try{const response=await axios.get(`${API_URL}/progress/lesson/${lessonId}`,{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при получении прогресса'};}return{success:false,message:'Не удалось получить прогресс. Проверьте подключение к интернету.'};}};/**\r\n * Обновляет прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @param data Данные о прогрессе (процент завершения)\r\n * @returns Объект с результатом операции\r\n */export const updateLessonProgress=async(lessonId,data)=>{try{const response=await axios.post(`${API_URL}/progress/update`,{lessonId,...data},{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при обновлении прогресса'};}return{success:false,message:'Не удалось обновить прогресс. Проверьте подключение к интернету.'};}};/**\r\n * Получает весь прогресс пользователя\r\n * @returns Объект со всеми данными о прогрессе\r\n */export const getAllProgress=async()=>{try{const response=await axios.get(`${API_URL}/progress`,{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при получении прогресса'};}return{success:false,message:'Не удалось получить прогресс. Проверьте подключение к интернету.'};}};/**\r\n * Обновляет прогресс для конкретного слова в уроке\r\n * @param lessonId ID урока\r\n * @param wordId ID слова\r\n * @returns Объект с результатом операции\r\n */export const updateWordProgress=async(lessonId,wordId)=>{try{const response=await axios.post(`${API_URL}/progress/update`,{lessonId,wordId},{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при обновлении прогресса'};}return{success:false,message:'Не удалось обновить прогресс. Проверьте подключение к интернету.'};}};/**\r\n * Получает общий прогресс пользователя\r\n * @returns Объект с общими данными о прогрессе\r\n */export const getUserProgress=async()=>{try{const response=await axios.get(`${API_URL}/progress/user`,{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при получении прогресса'};}return{success:false,message:'Не удалось получить прогресс. Проверьте подключение к интернету.'};}};/**\r\n * Сбрасывает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с результатом операции\r\n */export const resetLessonProgress=async lessonId=>{try{const response=await axios.delete(`${API_URL}/progress/lesson/${lessonId}`,{headers:getAuthHeader()});return response.data;}catch(error){if(axios.isAxiosError(error)&&error.response){return{success:false,message:error.response.data.message||'Ошибка при сбросе прогресса'};}return{success:false,message:'Не удалось сбросить прогресс. Проверьте подключение к интернету.'};}};","map":{"version":3,"names":["axios","API_URL","getAuthHeader","getLessonProgress","lessonId","response","get","headers","data","error","isAxiosError","success","message","updateLessonProgress","post","getAllProgress","updateWordProgress","wordId","getUserProgress","resetLessonProgress","delete"],"sources":["E:/grok/client/src/services/progress.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\nimport { getAuthHeader } from '../utils/auth';\r\nimport { ApiResponse, IProgress } from '../types';\r\n\r\nexport interface IProgressResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    lessonId: string;\r\n    userId: string;\r\n    completedWords: string[];\r\n    completionPercentage: number;\r\n    lastAccessed: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * Получает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с данными о прогрессе\r\n */\r\nexport const getLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress/lesson/${lessonId}`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Обновляет прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @param data Данные о прогрессе (процент завершения)\r\n * @returns Объект с результатом операции\r\n */\r\nexport const updateLessonProgress = async (\r\n  lessonId: string, \r\n  data: { completionPercentage: number }\r\n): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, ...data },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при обновлении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Получает весь прогресс пользователя\r\n * @returns Объект со всеми данными о прогрессе\r\n */\r\nexport const getAllProgress = async (): Promise<ApiResponse<IProgress[]>> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Обновляет прогресс для конкретного слова в уроке\r\n * @param lessonId ID урока\r\n * @param wordId ID слова\r\n * @returns Объект с результатом операции\r\n */\r\nexport const updateWordProgress = async (\r\n  lessonId: string, \r\n  wordId: string\r\n): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, wordId },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при обновлении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось обновить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Получает общий прогресс пользователя\r\n * @returns Объект с общими данными о прогрессе\r\n */\r\nexport const getUserProgress = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    completedLessons: number;\r\n    totalLessons: number;\r\n    completedWords: number;\r\n    totalWords: number;\r\n    overallPercentage: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const response = await axios.get(\r\n      `${API_URL}/progress/user`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при получении прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось получить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Сбрасывает прогресс для конкретного урока\r\n * @param lessonId ID урока\r\n * @returns Объект с результатом операции\r\n */\r\nexport const resetLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.delete(\r\n      `${API_URL}/progress/lesson/${lessonId}`,\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error) {\r\n    if (axios.isAxiosError(error) && error.response) {\r\n      return {\r\n        success: false,\r\n        message: error.response.data.message || 'Ошибка при сбросе прогресса',\r\n      };\r\n    }\r\n    return {\r\n      success: false,\r\n      message: 'Не удалось сбросить прогресс. Проверьте подключение к интернету.',\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}