{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';import{getAuthHeader}from'../utils/auth';/**\r\n * Get progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n */export const getLessonProgress=async lessonId=>{try{const response=await axios.get(`${API_URL}/progress/lesson/${lessonId}`,{headers:getAuthHeader()});return response.data;}catch(error){if(error.response){return error.response.data;}return{success:false,message:error.message||'Не удалось получить прогресс урока'};}};/**\r\n * Update progress for a lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param wordId - The ID of the completed word\r\n */export const updateWordProgress=async(lessonId,wordId)=>{try{const response=await axios.post(`${API_URL}/progress/update`,{lessonId,wordId},{headers:getAuthHeader()});return response.data;}catch(error){if(error.response){return error.response.data;}return{success:false,message:error.message||'Не удалось обновить прогресс'};}};/**\r\n * Get overall user progress across all lessons\r\n */export const getUserProgress=async()=>{try{const response=await axios.get(`${API_URL}/progress/user`,{headers:getAuthHeader()});return response.data;}catch(error){if(error.response){return error.response.data;}return{success:false,message:error.message||'Не удалось получить общий прогресс'};}};/**\r\n * Reset progress for a specific lesson\r\n * @param lessonId - The ID of the lesson to reset progress for\r\n */export const resetLessonProgress=async lessonId=>{try{const response=await axios.delete(`${API_URL}/progress/lesson/${lessonId}`,{headers:getAuthHeader()});return response.data;}catch(error){if(error.response){return error.response.data;}return{success:false,message:error.message||'Не удалось сбросить прогресс урока'};}};","map":{"version":3,"names":["axios","API_URL","getAuthHeader","getLessonProgress","lessonId","response","get","headers","data","error","success","message","updateWordProgress","wordId","post","getUserProgress","resetLessonProgress","delete"],"sources":["E:/grok/client/src/services/progress.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\nimport { getAuthHeader } from '../utils/auth';\r\n\r\nexport interface IProgressResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    lessonId: string;\r\n    userId: string;\r\n    completedWords: string[];\r\n    completionPercentage: number;\r\n    lastAccessed: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * Get progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n */\r\nexport const getLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/progress/lesson/${lessonId}`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось получить прогресс урока'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Update progress for a lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param wordId - The ID of the completed word\r\n */\r\nexport const updateWordProgress = async (lessonId: string, wordId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, wordId },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось обновить прогресс'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get overall user progress across all lessons\r\n */\r\nexport const getUserProgress = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    completedLessons: number;\r\n    totalLessons: number;\r\n    completedWords: number;\r\n    totalWords: number;\r\n    overallPercentage: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/progress/user`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось получить общий прогресс'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Reset progress for a specific lesson\r\n * @param lessonId - The ID of the lesson to reset progress for\r\n */\r\nexport const resetLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/progress/lesson/${lessonId}`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось сбросить прогресс урока'\r\n    };\r\n  }\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,OAAO,KAAQ,WAAW,CACnC,OAASC,aAAa,KAAQ,eAAe,CAc7C;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,iBAAiB,CAAG,KAAO,CAAAC,QAAgB,EAAiC,CACvF,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,oBAAoBG,QAAQ,EAAE,CAAE,CACzEG,OAAO,CAAEL,aAAa,CAAC,CACzB,CAAC,CAAC,CACF,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACJ,QAAQ,CAAE,CAClB,MAAO,CAAAI,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAC5B,CACA,MAAO,CACLE,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEF,KAAK,CAACE,OAAO,EAAI,oCAC5B,CAAC,CACH,CACF,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAOR,QAAgB,CAAES,MAAc,GAAiC,CACxG,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACc,IAAI,CAC/B,GAAGb,OAAO,kBAAkB,CAC5B,CAAEG,QAAQ,CAAES,MAAO,CAAC,CACpB,CAAEN,OAAO,CAAEL,aAAa,CAAC,CAAE,CAC7B,CAAC,CACD,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACJ,QAAQ,CAAE,CAClB,MAAO,CAAAI,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAC5B,CACA,MAAO,CACLE,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEF,KAAK,CAACE,OAAO,EAAI,8BAC5B,CAAC,CACH,CACF,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAI,eAAe,CAAG,KAAAA,CAAA,GAUzB,CACJ,GAAI,CACF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,GAAG,CAAC,GAAGL,OAAO,gBAAgB,CAAE,CAC3DM,OAAO,CAAEL,aAAa,CAAC,CACzB,CAAC,CAAC,CACF,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACJ,QAAQ,CAAE,CAClB,MAAO,CAAAI,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAC5B,CACA,MAAO,CACLE,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEF,KAAK,CAACE,OAAO,EAAI,oCAC5B,CAAC,CACH,CACF,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,mBAAmB,CAAG,KAAO,CAAAZ,QAAgB,EAAiC,CACzF,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACiB,MAAM,CAAC,GAAGhB,OAAO,oBAAoBG,QAAQ,EAAE,CAAE,CAC5EG,OAAO,CAAEL,aAAa,CAAC,CACzB,CAAC,CAAC,CACF,MAAO,CAAAG,QAAQ,CAACG,IAAI,CACtB,CAAE,MAAOC,KAAU,CAAE,CACnB,GAAIA,KAAK,CAACJ,QAAQ,CAAE,CAClB,MAAO,CAAAI,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAC5B,CACA,MAAO,CACLE,OAAO,CAAE,KAAK,CACdC,OAAO,CAAEF,KAAK,CAACE,OAAO,EAAI,oCAC5B,CAAC,CACH,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}