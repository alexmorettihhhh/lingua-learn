{"ast":null,"code":"import api from'./api';// Получение всех слов с пагинацией\nexport const getWords=async function(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:1;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const response=await api.get(`/words?page=${page}&limit=${limit}`);return response.data;};// Получение слова по ID\nexport const getWord=async id=>{const response=await api.get(`/words/${id}`);return response.data;};// Получение слов по языку\nexport const getWordsByLanguage=async function(language){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;const response=await api.get(`/words/language/${language}?page=${page}&limit=${limit}`);return response.data;};// Получение слов по категории\nexport const getWordsByCategory=async function(category){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;let limit=arguments.length>2&&arguments[2]!==undefined?arguments[2]:50;const response=await api.get(`/words/category/${category}?page=${page}&limit=${limit}`);return response.data;};// Создание нового слова (только для админов)\nexport const createWord=async wordData=>{const response=await api.post('/words',wordData);return response.data;};// Обновление слова (только для админов)\nexport const updateWord=async(id,wordData)=>{const response=await api.put(`/words/${id}`,wordData);return response.data;};// Удаление слова (только для админов)\nexport const deleteWord=async id=>{const response=await api.delete(`/words/${id}`);return response.data;};","map":{"version":3,"names":["api","getWords","page","arguments","length","undefined","limit","response","get","data","getWord","id","getWordsByLanguage","language","getWordsByCategory","category","createWord","wordData","post","updateWord","put","deleteWord","delete"],"sources":["E:/grok/client/src/services/word.service.ts"],"sourcesContent":["import api from './api';\r\nimport { IWord, ApiResponse } from '../types';\r\n\r\n// Получение всех слов с пагинацией\r\nexport const getWords = async (\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Получение слова по ID\r\nexport const getWord = async (id: string): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.get<ApiResponse<IWord>>(`/words/${id}`);\r\n  return response.data;\r\n};\r\n\r\n// Получение слов по языку\r\nexport const getWordsByLanguage = async (\r\n  language: string,\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words/language/${language}?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Получение слов по категории\r\nexport const getWordsByCategory = async (\r\n  category: string,\r\n  page = 1,\r\n  limit = 50\r\n): Promise<ApiResponse<IWord[]>> => {\r\n  const response = await api.get<ApiResponse<IWord[]>>(\r\n    `/words/category/${category}?page=${page}&limit=${limit}`\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Создание нового слова (только для админов)\r\nexport const createWord = async (wordData: Partial<IWord>): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.post<ApiResponse<IWord>>('/words', wordData);\r\n  return response.data;\r\n};\r\n\r\n// Обновление слова (только для админов)\r\nexport const updateWord = async (\r\n  id: string,\r\n  wordData: Partial<IWord>\r\n): Promise<ApiResponse<IWord>> => {\r\n  const response = await api.put<ApiResponse<IWord>>(`/words/${id}`, wordData);\r\n  return response.data;\r\n};\r\n\r\n// Удаление слова (только для админов)\r\nexport const deleteWord = async (id: string): Promise<ApiResponse<null>> => {\r\n  const response = await api.delete<ApiResponse<null>>(`/words/${id}`);\r\n  return response.data;\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAGvB;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAG,cAAAA,CAAA,CAGY,IAFlC,CAAAC,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IACR,CAAAG,KAAK,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAEV,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAC5B,eAAeN,IAAI,UAAUI,KAAK,EACpC,CAAC,CACD,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,OAAO,CAAG,KAAO,CAAAC,EAAU,EAAkC,CACxE,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAAqB,UAAUG,EAAE,EAAE,CAAC,CAClE,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,kBAAkB,CAAG,cAAAA,CAChCC,QAAgB,CAGkB,IAFlC,CAAAX,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IACR,CAAAG,KAAK,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAEV,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAC5B,mBAAmBK,QAAQ,SAASX,IAAI,UAAUI,KAAK,EACzD,CAAC,CACD,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,kBAAkB,CAAG,cAAAA,CAChCC,QAAgB,CAGkB,IAFlC,CAAAb,IAAI,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IACR,CAAAG,KAAK,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAEV,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACQ,GAAG,CAC5B,mBAAmBO,QAAQ,SAASb,IAAI,UAAUI,KAAK,EACzD,CAAC,CACD,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,UAAU,CAAG,KAAO,CAAAC,QAAwB,EAAkC,CACzF,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACkB,IAAI,CAAqB,QAAQ,CAAED,QAAQ,CAAC,CACvE,MAAO,CAAAV,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,UAAU,CAAG,KAAAA,CACxBR,EAAU,CACVM,QAAwB,GACQ,CAChC,KAAM,CAAAV,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACoB,GAAG,CAAqB,UAAUT,EAAE,EAAE,CAAEM,QAAQ,CAAC,CAC5E,MAAO,CAAAV,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,UAAU,CAAG,KAAO,CAAAV,EAAU,EAAiC,CAC1E,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAP,GAAG,CAACsB,MAAM,CAAoB,UAAUX,EAAE,EAAE,CAAC,CACpE,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}