{"ast":null,"code":"/**\r\n * Get the authentication token from local storage\r\n * @returns The authentication token or null if not found\r\n */\nexport const getToken = () => {\n  return localStorage.getItem('token');\n};\n\n/**\r\n * Set the authentication token in local storage\r\n * @param token - The authentication token to store\r\n */\nexport const setToken = token => {\n  localStorage.setItem('token', token);\n};\n\n/**\r\n * Remove the authentication token from local storage\r\n */\nexport const removeToken = () => {\n  localStorage.removeItem('token');\n};\n\n/**\r\n * Check if the user is authenticated\r\n * @returns True if the user is authenticated, false otherwise\r\n */\nexport const isAuthenticated = () => {\n  return !!getToken();\n};\n\n/**\r\n * Get the authentication header for API requests\r\n * @returns An object with the Authorization header or an empty object if not authenticated\r\n */\nexport const getAuthHeader = () => {\n  const token = getToken();\n  return token ? {\n    Authorization: `Bearer ${token}`\n  } : {};\n};\n\n/**\r\n * Get the user ID from the token\r\n * @returns The user ID or null if not found\r\n */\nexport const getUserId = () => {\n  return localStorage.getItem('userId');\n};\n\n/**\r\n * Set the user ID in local storage\r\n * @param userId - The user ID to store\r\n */\nexport const setUserId = userId => {\n  localStorage.setItem('userId', userId);\n};\n\n/**\r\n * Remove the user ID from local storage\r\n */\nexport const removeUserId = () => {\n  localStorage.removeItem('userId');\n};\n\n/**\r\n * Get the user role from local storage\r\n * @returns The user role or null if not found\r\n */\nexport const getUserRole = () => {\n  return localStorage.getItem('userRole');\n};\n\n/**\r\n * Set the user role in local storage\r\n * @param role - The user role to store\r\n */\nexport const setUserRole = role => {\n  localStorage.setItem('userRole', role);\n};\n\n/**\r\n * Remove the user role from local storage\r\n */\nexport const removeUserRole = () => {\n  localStorage.removeItem('userRole');\n};\n\n/**\r\n * Check if the user is an admin\r\n * @returns True if the user is an admin, false otherwise\r\n */\nexport const isAdmin = () => {\n  return getUserRole() === 'admin';\n};\n\n/**\r\n * Clear all authentication data from local storage\r\n */\nexport const clearAuth = () => {\n  removeToken();\n  removeUserId();\n  removeUserRole();\n};","map":{"version":3,"names":["getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","isAuthenticated","getAuthHeader","Authorization","getUserId","setUserId","userId","removeUserId","getUserRole","setUserRole","role","removeUserRole","isAdmin","clearAuth"],"sources":["E:/grok/client/src/utils/auth.ts"],"sourcesContent":["/**\r\n * Get the authentication token from local storage\r\n * @returns The authentication token or null if not found\r\n */\r\nexport const getToken = (): string | null => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n/**\r\n * Set the authentication token in local storage\r\n * @param token - The authentication token to store\r\n */\r\nexport const setToken = (token: string): void => {\r\n  localStorage.setItem('token', token);\r\n};\r\n\r\n/**\r\n * Remove the authentication token from local storage\r\n */\r\nexport const removeToken = (): void => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n/**\r\n * Check if the user is authenticated\r\n * @returns True if the user is authenticated, false otherwise\r\n */\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!getToken();\r\n};\r\n\r\n/**\r\n * Get the authentication header for API requests\r\n * @returns An object with the Authorization header or an empty object if not authenticated\r\n */\r\nexport const getAuthHeader = (): { Authorization?: string } => {\r\n  const token = getToken();\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n/**\r\n * Get the user ID from the token\r\n * @returns The user ID or null if not found\r\n */\r\nexport const getUserId = (): string | null => {\r\n  return localStorage.getItem('userId');\r\n};\r\n\r\n/**\r\n * Set the user ID in local storage\r\n * @param userId - The user ID to store\r\n */\r\nexport const setUserId = (userId: string): void => {\r\n  localStorage.setItem('userId', userId);\r\n};\r\n\r\n/**\r\n * Remove the user ID from local storage\r\n */\r\nexport const removeUserId = (): void => {\r\n  localStorage.removeItem('userId');\r\n};\r\n\r\n/**\r\n * Get the user role from local storage\r\n * @returns The user role or null if not found\r\n */\r\nexport const getUserRole = (): string | null => {\r\n  return localStorage.getItem('userRole');\r\n};\r\n\r\n/**\r\n * Set the user role in local storage\r\n * @param role - The user role to store\r\n */\r\nexport const setUserRole = (role: string): void => {\r\n  localStorage.setItem('userRole', role);\r\n};\r\n\r\n/**\r\n * Remove the user role from local storage\r\n */\r\nexport const removeUserRole = (): void => {\r\n  localStorage.removeItem('userRole');\r\n};\r\n\r\n/**\r\n * Check if the user is an admin\r\n * @returns True if the user is an admin, false otherwise\r\n */\r\nexport const isAdmin = (): boolean => {\r\n  return getUserRole() === 'admin';\r\n};\r\n\r\n/**\r\n * Clear all authentication data from local storage\r\n */\r\nexport const clearAuth = (): void => {\r\n  removeToken();\r\n  removeUserId();\r\n  removeUserRole();\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,QAAQ,GAAGA,CAAA,KAAqB;EAC3C,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,QAAQ,GAAIC,KAAa,IAAW;EAC/CH,YAAY,CAACI,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;AACtC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAME,WAAW,GAAGA,CAAA,KAAY;EACrCL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAe;EAC5C,OAAO,CAAC,CAACR,QAAQ,CAAC,CAAC;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMS,aAAa,GAAGA,CAAA,KAAkC;EAC7D,MAAML,KAAK,GAAGJ,QAAQ,CAAC,CAAC;EACxB,OAAOI,KAAK,GAAG;IAAEM,aAAa,EAAE,UAAUN,KAAK;EAAG,CAAC,GAAG,CAAC,CAAC;AAC1D,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMO,SAAS,GAAGA,CAAA,KAAqB;EAC5C,OAAOV,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;AACvC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMU,SAAS,GAAIC,MAAc,IAAW;EACjDZ,YAAY,CAACI,OAAO,CAAC,QAAQ,EAAEQ,MAAM,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAY;EACtCb,YAAY,CAACM,UAAU,CAAC,QAAQ,CAAC;AACnC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMQ,WAAW,GAAGA,CAAA,KAAqB;EAC9C,OAAOd,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMc,WAAW,GAAIC,IAAY,IAAW;EACjDhB,YAAY,CAACI,OAAO,CAAC,UAAU,EAAEY,IAAI,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAY;EACxCjB,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;AACrC,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMY,OAAO,GAAGA,CAAA,KAAe;EACpC,OAAOJ,WAAW,CAAC,CAAC,KAAK,OAAO;AAClC,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMK,SAAS,GAAGA,CAAA,KAAY;EACnCd,WAAW,CAAC,CAAC;EACbQ,YAAY,CAAC,CAAC;EACdI,cAAc,CAAC,CAAC;AAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}