{"ast":null,"code":"/**\r\n * Get the authentication token from local storage\r\n * @returns The authentication token or null if not found\r\n */export const getToken=()=>{return localStorage.getItem('token');};/**\r\n * Set the authentication token in local storage\r\n * @param token - The authentication token to store\r\n */export const setToken=token=>{localStorage.setItem('token',token);};/**\r\n * Remove the authentication token from local storage\r\n */export const removeToken=()=>{localStorage.removeItem('token');};/**\r\n * Check if the user is authenticated\r\n * @returns True if the user is authenticated, false otherwise\r\n */export const isAuthenticated=()=>{return!!getToken();};/**\r\n * Get the authentication header for API requests\r\n * @returns An object with the Authorization header or an empty object if not authenticated\r\n */export const getAuthHeader=()=>{const token=getToken();return token?{Authorization:`Bearer ${token}`}:{};};/**\r\n * Get the user ID from the token\r\n * @returns The user ID or null if not found\r\n */export const getUserId=()=>{return localStorage.getItem('userId');};/**\r\n * Set the user ID in local storage\r\n * @param userId - The user ID to store\r\n */export const setUserId=userId=>{localStorage.setItem('userId',userId);};/**\r\n * Remove the user ID from local storage\r\n */export const removeUserId=()=>{localStorage.removeItem('userId');};/**\r\n * Get the user role from local storage\r\n * @returns The user role or null if not found\r\n */export const getUserRole=()=>{return localStorage.getItem('userRole');};/**\r\n * Set the user role in local storage\r\n * @param role - The user role to store\r\n */export const setUserRole=role=>{localStorage.setItem('userRole',role);};/**\r\n * Remove the user role from local storage\r\n */export const removeUserRole=()=>{localStorage.removeItem('userRole');};/**\r\n * Check if the user is an admin\r\n * @returns True if the user is an admin, false otherwise\r\n */export const isAdmin=()=>{return getUserRole()==='admin';};/**\r\n * Clear all authentication data from local storage\r\n */export const clearAuth=()=>{removeToken();removeUserId();removeUserRole();};","map":{"version":3,"names":["getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","isAuthenticated","getAuthHeader","Authorization","getUserId","setUserId","userId","removeUserId","getUserRole","setUserRole","role","removeUserRole","isAdmin","clearAuth"],"sources":["E:/grok/client/src/utils/auth.ts"],"sourcesContent":["/**\r\n * Get the authentication token from local storage\r\n * @returns The authentication token or null if not found\r\n */\r\nexport const getToken = (): string | null => {\r\n  return localStorage.getItem('token');\r\n};\r\n\r\n/**\r\n * Set the authentication token in local storage\r\n * @param token - The authentication token to store\r\n */\r\nexport const setToken = (token: string): void => {\r\n  localStorage.setItem('token', token);\r\n};\r\n\r\n/**\r\n * Remove the authentication token from local storage\r\n */\r\nexport const removeToken = (): void => {\r\n  localStorage.removeItem('token');\r\n};\r\n\r\n/**\r\n * Check if the user is authenticated\r\n * @returns True if the user is authenticated, false otherwise\r\n */\r\nexport const isAuthenticated = (): boolean => {\r\n  return !!getToken();\r\n};\r\n\r\n/**\r\n * Get the authentication header for API requests\r\n * @returns An object with the Authorization header or an empty object if not authenticated\r\n */\r\nexport const getAuthHeader = (): { Authorization?: string } => {\r\n  const token = getToken();\r\n  return token ? { Authorization: `Bearer ${token}` } : {};\r\n};\r\n\r\n/**\r\n * Get the user ID from the token\r\n * @returns The user ID or null if not found\r\n */\r\nexport const getUserId = (): string | null => {\r\n  return localStorage.getItem('userId');\r\n};\r\n\r\n/**\r\n * Set the user ID in local storage\r\n * @param userId - The user ID to store\r\n */\r\nexport const setUserId = (userId: string): void => {\r\n  localStorage.setItem('userId', userId);\r\n};\r\n\r\n/**\r\n * Remove the user ID from local storage\r\n */\r\nexport const removeUserId = (): void => {\r\n  localStorage.removeItem('userId');\r\n};\r\n\r\n/**\r\n * Get the user role from local storage\r\n * @returns The user role or null if not found\r\n */\r\nexport const getUserRole = (): string | null => {\r\n  return localStorage.getItem('userRole');\r\n};\r\n\r\n/**\r\n * Set the user role in local storage\r\n * @param role - The user role to store\r\n */\r\nexport const setUserRole = (role: string): void => {\r\n  localStorage.setItem('userRole', role);\r\n};\r\n\r\n/**\r\n * Remove the user role from local storage\r\n */\r\nexport const removeUserRole = (): void => {\r\n  localStorage.removeItem('userRole');\r\n};\r\n\r\n/**\r\n * Check if the user is an admin\r\n * @returns True if the user is an admin, false otherwise\r\n */\r\nexport const isAdmin = (): boolean => {\r\n  return getUserRole() === 'admin';\r\n};\r\n\r\n/**\r\n * Clear all authentication data from local storage\r\n */\r\nexport const clearAuth = (): void => {\r\n  removeToken();\r\n  removeUserId();\r\n  removeUserRole();\r\n}; "],"mappings":"AAAA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,QAAQ,CAAGA,CAAA,GAAqB,CAC3C,MAAO,CAAAC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CACtC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,QAAQ,CAAIC,KAAa,EAAW,CAC/CH,YAAY,CAACI,OAAO,CAAC,OAAO,CAAED,KAAK,CAAC,CACtC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAE,WAAW,CAAGA,CAAA,GAAY,CACrCL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC,CAClC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,eAAe,CAAGA,CAAA,GAAe,CAC5C,MAAO,CAAC,CAACR,QAAQ,CAAC,CAAC,CACrB,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAS,aAAa,CAAGA,CAAA,GAAkC,CAC7D,KAAM,CAAAL,KAAK,CAAGJ,QAAQ,CAAC,CAAC,CACxB,MAAO,CAAAI,KAAK,CAAG,CAAEM,aAAa,CAAE,UAAUN,KAAK,EAAG,CAAC,CAAG,CAAC,CAAC,CAC1D,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAO,SAAS,CAAGA,CAAA,GAAqB,CAC5C,MAAO,CAAAV,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CACvC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAU,SAAS,CAAIC,MAAc,EAAW,CACjDZ,YAAY,CAACI,OAAO,CAAC,QAAQ,CAAEQ,MAAM,CAAC,CACxC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,YAAY,CAAGA,CAAA,GAAY,CACtCb,YAAY,CAACM,UAAU,CAAC,QAAQ,CAAC,CACnC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAQ,WAAW,CAAGA,CAAA,GAAqB,CAC9C,MAAO,CAAAd,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CACzC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAc,WAAW,CAAIC,IAAY,EAAW,CACjDhB,YAAY,CAACI,OAAO,CAAC,UAAU,CAAEY,IAAI,CAAC,CACxC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAC,cAAc,CAAGA,CAAA,GAAY,CACxCjB,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC,CACrC,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAY,OAAO,CAAGA,CAAA,GAAe,CACpC,MAAO,CAAAJ,WAAW,CAAC,CAAC,GAAK,OAAO,CAClC,CAAC,CAED;AACA;AACA,GACA,MAAO,MAAM,CAAAK,SAAS,CAAGA,CAAA,GAAY,CACnCd,WAAW,CAAC,CAAC,CACbQ,YAAY,CAAC,CAAC,CACdI,cAAc,CAAC,CAAC,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}