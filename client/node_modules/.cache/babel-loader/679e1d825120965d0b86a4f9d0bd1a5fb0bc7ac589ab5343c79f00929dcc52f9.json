{"ast":null,"code":"import api from'./api';// Интерфейс для ответа при аутентификации\n// Регистрация пользователя\nexport const register=async userData=>{const response=await api.post('/auth/register',userData);return response.data;};// Вход пользователя\nexport const login=async userData=>{const response=await api.post('/auth/login',userData);return response.data;};// Получение данных текущего пользователя\nexport const getCurrentUser=async()=>{const response=await api.get('/auth/me');return response.data;};// Обновление пароля\nexport const updatePassword=async(currentPassword,newPassword)=>{const response=await api.put('/auth/updatepassword',{currentPassword,newPassword});return response.data;};// Выход пользователя (локальная очистка)\nexport const logout=()=>{localStorage.removeItem('token');};","map":{"version":3,"names":["api","register","userData","response","post","data","login","getCurrentUser","get","updatePassword","currentPassword","newPassword","put","logout","localStorage","removeItem"],"sources":["E:/grok/client/src/services/auth.service.ts"],"sourcesContent":["import api from './api';\r\nimport { ILoginData, IRegisterData, IUser } from '../types';\r\n\r\n// Интерфейс для ответа при аутентификации\r\ninterface AuthResponse {\r\n  success: boolean;\r\n  token: string;\r\n  user: IUser;\r\n  message?: string;\r\n}\r\n\r\n// Регистрация пользователя\r\nexport const register = async (userData: IRegisterData): Promise<AuthResponse> => {\r\n  const response = await api.post<AuthResponse>('/auth/register', userData);\r\n  return response.data;\r\n};\r\n\r\n// Вход пользователя\r\nexport const login = async (userData: ILoginData): Promise<AuthResponse> => {\r\n  const response = await api.post<AuthResponse>('/auth/login', userData);\r\n  return response.data;\r\n};\r\n\r\n// Получение данных текущего пользователя\r\nexport const getCurrentUser = async (): Promise<{ success: boolean; user: IUser }> => {\r\n  const response = await api.get<{ success: boolean; user: IUser }>('/auth/me');\r\n  return response.data;\r\n};\r\n\r\n// Обновление пароля\r\nexport const updatePassword = async (\r\n  currentPassword: string,\r\n  newPassword: string\r\n): Promise<{ success: boolean; message: string }> => {\r\n  const response = await api.put<{ success: boolean; message: string }>(\r\n    '/auth/updatepassword',\r\n    { currentPassword, newPassword }\r\n  );\r\n  return response.data;\r\n};\r\n\r\n// Выход пользователя (локальная очистка)\r\nexport const logout = (): void => {\r\n  localStorage.removeItem('token');\r\n}; "],"mappings":"AAAA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAGvB;AAQA;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAG,KAAO,CAAAC,QAAuB,EAA4B,CAChF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAe,gBAAgB,CAAEF,QAAQ,CAAC,CACzE,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,KAAK,CAAG,KAAO,CAAAJ,QAAoB,EAA4B,CAC1E,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACI,IAAI,CAAe,aAAa,CAAEF,QAAQ,CAAC,CACtE,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAE,cAAc,CAAG,KAAAA,CAAA,GAAwD,CACpF,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACQ,GAAG,CAAoC,UAAU,CAAC,CAC7E,MAAO,CAAAL,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,cAAc,CAAG,KAAAA,CAC5BC,eAAuB,CACvBC,WAAmB,GACgC,CACnD,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAH,GAAG,CAACY,GAAG,CAC5B,sBAAsB,CACtB,CAAEF,eAAe,CAAEC,WAAY,CACjC,CAAC,CACD,MAAO,CAAAR,QAAQ,CAACE,IAAI,CACtB,CAAC,CAED;AACA,MAAO,MAAM,CAAAQ,MAAM,CAAGA,CAAA,GAAY,CAChCC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC,CAClC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}