{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../config';\nimport { getAuthHeader } from '../utils/auth';\n/**\r\n * Get progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n * @returns Promise with the lesson progress data\r\n */\nexport const getLessonProgress = async lessonId => {\n  try {\n    const response = await axios.get(`${API_URL}/progress/lesson/${lessonId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Ошибка при получении прогресса урока'\n    };\n  }\n};\n\n/**\r\n * Update progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param data - Progress data to update\r\n * @returns Promise with the updated progress data\r\n */\nexport const updateLessonProgress = async (lessonId, data) => {\n  try {\n    const response = await axios.post(`${API_URL}/progress/lesson/${lessonId}`, data, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Ошибка при обновлении прогресса урока'\n    };\n  }\n};\n\n/**\r\n * Get all progress for the current user\r\n * @returns Promise with all progress data\r\n */\nexport const getAllProgress = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/progress`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Ошибка при получении прогресса'\n    };\n  }\n};\n\n/**\r\n * Update progress for a lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param wordId - The ID of the completed word\r\n */\nexport const updateWordProgress = async (lessonId, wordId) => {\n  try {\n    const response = await axios.post(`${API_URL}/progress/update`, {\n      lessonId,\n      wordId\n    }, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Не удалось обновить прогресс'\n    };\n  }\n};\n\n/**\r\n * Get overall user progress across all lessons\r\n */\nexport const getUserProgress = async () => {\n  try {\n    const response = await axios.get(`${API_URL}/progress/user`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Не удалось получить общий прогресс'\n    };\n  }\n};\n\n/**\r\n * Reset progress for a specific lesson\r\n * @param lessonId - The ID of the lesson to reset progress for\r\n */\nexport const resetLessonProgress = async lessonId => {\n  try {\n    const response = await axios.delete(`${API_URL}/progress/lesson/${lessonId}`, {\n      headers: getAuthHeader()\n    });\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      return error.response.data;\n    }\n    return {\n      success: false,\n      message: error.message || 'Не удалось сбросить прогресс урока'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_URL","getAuthHeader","getLessonProgress","lessonId","response","get","headers","data","error","success","message","updateLessonProgress","post","getAllProgress","updateWordProgress","wordId","getUserProgress","resetLessonProgress","delete"],"sources":["E:/grok/client/src/services/progress.service.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from '../config';\r\nimport { getAuthHeader } from '../utils/auth';\r\n\r\nexport interface IProgressResponse {\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    lessonId: string;\r\n    userId: string;\r\n    completedWords: string[];\r\n    completionPercentage: number;\r\n    lastAccessed: Date;\r\n  };\r\n}\r\n\r\n/**\r\n * Get progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n * @returns Promise with the lesson progress data\r\n */\r\nexport const getLessonProgress = async (lessonId: string) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/progress/lesson/${lessonId}`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Ошибка при получении прогресса урока'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Update progress for a specific lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param data - Progress data to update\r\n * @returns Promise with the updated progress data\r\n */\r\nexport const updateLessonProgress = async (lessonId: string, data: { completionPercentage: number }) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/progress/lesson/${lessonId}`, data, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Ошибка при обновлении прогресса урока'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get all progress for the current user\r\n * @returns Promise with all progress data\r\n */\r\nexport const getAllProgress = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/progress`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Ошибка при получении прогресса'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Update progress for a lesson\r\n * @param lessonId - The ID of the lesson\r\n * @param wordId - The ID of the completed word\r\n */\r\nexport const updateWordProgress = async (lessonId: string, wordId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.post(\r\n      `${API_URL}/progress/update`,\r\n      { lessonId, wordId },\r\n      { headers: getAuthHeader() }\r\n    );\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось обновить прогресс'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get overall user progress across all lessons\r\n */\r\nexport const getUserProgress = async (): Promise<{\r\n  success: boolean;\r\n  message?: string;\r\n  data?: {\r\n    completedLessons: number;\r\n    totalLessons: number;\r\n    completedWords: number;\r\n    totalWords: number;\r\n    overallPercentage: number;\r\n  };\r\n}> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/progress/user`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось получить общий прогресс'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Reset progress for a specific lesson\r\n * @param lessonId - The ID of the lesson to reset progress for\r\n */\r\nexport const resetLessonProgress = async (lessonId: string): Promise<IProgressResponse> => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL}/progress/lesson/${lessonId}`, {\r\n      headers: getAuthHeader()\r\n    });\r\n    return response.data;\r\n  } catch (error: any) {\r\n    if (error.response) {\r\n      return error.response.data;\r\n    }\r\n    return {\r\n      success: false,\r\n      message: error.message || 'Не удалось сбросить прогресс урока'\r\n    };\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}